#3. Решите задачу
# Класс Tomato:
# 1. Создайте класс Tomato
# 2. Создайте статическое свойство states, которое будет содержать все стадии
# созревания помидора
# 3. Создайте метод __init__(), внутри которого будут определены два динамических
# protected свойства: 1) _index - передается параметром и 2) _state - принимает первое
# значение из словаря states
# 4. Создайте метод grow(), который будет переводить томат на следующую стадию
# созревания
# 5. Создайте метод is_ripe(), который будет проверять, что томат созрел (достиг
# последней стадии созревания)
# Класс TomatoBush
# 1. Создайте класс TomatoBush
# 2. Определите метод __init__(), который будет принимать в качестве параметра
# количество томатов и на его основе будет создавать список объектов класса
# Tomato. Данный список будет храниться внутри динамического свойства tomatoes.
# 3. Создайте метод grow_all(), который будет переводить все объекты из списка
# томатов на следующий этап созревания
# 4. Создайте метод all_are_ripe(), который будет возвращать True, если все томаты из
# списка стали спелыми
# 5. Создайте метод give_away_all(), который будет чистить список томатов после
# сбора урожая
# Класс Gardener
# 1. Создайте класс Gardener
# 2. Создайте метод __init__(), внутри которого будут определены два динамических
# свойства: 1) name - передается параметром, является публичным и 2) _plant -
# принимает объект класса Tomato, является protected
# 3. Создайте метод work(), который заставляет садовника работать, что позволяет
# растению становиться более зрелым
# 4. Создайте метод harvest(), который проверяет, все ли плоды созрели. Если все -
# садовник собирает урожай. Если нет - метод печатает предупреждение.
# 5. Создайте статический метод knowledge_base(), который выведет в консоль справку
# по садоводству.
# Тесты:
# 1. Вызовите справку по садоводству
# 2. Создайте объекты классов TomatoBush и Gardener
# 3. Используя объект класса Gardener, поухаживайте за кустом с помидорами
# 4. Попробуйте собрать урожай
# 5. Если томаты еще не дозрели, продолжайте ухаживать за ними
# 6. Соберите урожа


class Tomato:

    # все стадии созревания помидора
    states = {0: 'no_tomato', 1: 'flower', 2: 'green_tomato', 3: 'red_tomato'}
    # метод __init__(), внутри которого будут определены два динамических
    # protected свойства:1) _index - передается параметром и 2)_state - принимает первое
    # значение из словаря states
    def __init__(self, i):
        self._i= i
        self._state = 0

    # метод grow(), который будет переводить томат на следующую стадию созревания
    def grow(self):
        self._change_state()

    # метод is_ripe(), который будет проверять, что томат созрел (достиг
    # последней стадии созревания)
    def is_ripe(self):
        if self._state == 3:
            return True
        return False

    # Защищенные(protected) методы

    def _change_state(self):
        if self._state < 3:
            self._state += 1
        self._print_state()

    def _print_state(self):
        print(f'Tomato {self._i} is {Tomato.states[self._state]}')


class TomatoBush:

    # метод __init__(), который будет принимать в качестве параметра
    # количество томатов и на его основе будет создавать список объектов класса Tomato
    def __init__(self, num):
        self.tomatoes = [Tomato(i) for i in range(0, num)]

    # метод grow_all(), который будет переводить все объекты из списка
    # томатов на следующий этап созревания
    def grow_all(self):
        for tomato in self.tomatoes:
            tomato.grow()

    # метод all_are_ripe(), который будет возвращать True, если все томаты из
    # списка стали спелыми
    def all_are_ripe(self):
        return all([tomato.is_ripe() for tomato in self.tomatoes])

    # метод give_away_all(), который будет чистить список томатов после сбора урожая
    def give_away_all(self):
        self.tomatoes = []


class Gardener:

    # метод __init__(), внутри которого будут определены два динамических
    # свойства: 1) name - передается параметром, является публичным и 2) _plant -
    # принимает объект класса Tomato, является protected
    def __init__(self, name, plant):
        self.name = name
        self._plant = plant

    # метод work(), который заставляет садовника работать, что позволяет
    # растению становиться более зрелым
    def work(self):
        print('Cадовник работает над урожаем.')
        self._plant.grow_all()
        print('Садовник закончил работу.')

    # метод harvest(), который проверяет, все ли плоды созрели. Если все -
    # садовник собирает урожай. Если нет - метод печатает предупреждение
    def harvest(self):
        print('Садовник собирает урожай.')
        if self._plant.all_are_ripe():
            self._plant.give_away_all()
            print('Сбор закончен!')
        else:
            print('Слишком рано:( Плодам еще нужно созреть!')

    # статический метод knowledge_base(),который выведет в консоль справку по садоводству
    @staticmethod
    def knowledge_base():
        print('''Все томаты, выращиваемые в теплицах, рекомендуется снимать с куста
         немного недозревшими (светло-бурыми). Это позволит оставшимся зеленым помидорам 
         дозреть быстрее. Точное время, когда нужно собирать помидоры для дозаривания, 
         зависит от периода высадки рассады и сорта овоща. 
         Как правило, первый урожай тепличных томатов собирают в начале июня, 
         а плоды позднеспелых сортов снимают с куста в конце сентября.''')


# Тесты:
# 1. Вызовите справку по садоводству
# 2. Создайте объекты классов TomatoBush и Gardener
# 3. Используя объект класса Gardener, поухаживайте за кустом с помидорами
# 4. Попробуйте собрать урожай
# 5. Если томаты еще не дозрели, продолжайте ухаживать за ними
# 6. Соберите урожай

if __name__ == '__main__':
    Gardener.knowledge_base()
    tomato_bush = TomatoBush(4)
    gardener = Gardener('TOM', tomato_bush)
    gardener.work()
    gardener.work()
    gardener.harvest()
    gardener.work()
    gardener.harvest()

